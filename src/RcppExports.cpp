// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// qbldf
Rcpp::List qbldf(int nsim, double p, arma::mat y, arma::mat datax, arma::mat datas, arma::vec b0, arma::mat B0, double c1, double d1, int m, int n, int k, int l, bool verbose);
RcppExport SEXP _qbld_qbldf(SEXP nsimSEXP, SEXP pSEXP, SEXP ySEXP, SEXP dataxSEXP, SEXP datasSEXP, SEXP b0SEXP, SEXP B0SEXP, SEXP c1SEXP, SEXP d1SEXP, SEXP mSEXP, SEXP nSEXP, SEXP kSEXP, SEXP lSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type datax(dataxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type datas(datasSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(qbldf(nsim, p, y, datax, datas, b0, B0, c1, d1, m, n, k, l, verbose));
    return rcpp_result_gen;
END_RCPP
}
// dgig
std::vector<double> dgig(std::vector<double> x, double a, double b, double p, bool log_density);
RcppExport SEXP _qbld_dgig(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP pSEXP, SEXP log_densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type log_density(log_densitySEXP);
    rcpp_result_gen = Rcpp::wrap(dgig(x, a, b, p, log_density));
    return rcpp_result_gen;
END_RCPP
}
// raldmix
arma::vec raldmix(double n, double mu, double sigma, double p);
RcppExport SEXP _qbld_raldmix(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(raldmix(n, mu, sigma, p));
    return rcpp_result_gen;
END_RCPP
}
// rgig
arma::vec rgig(double n, double lambda, double a, double b);
RcppExport SEXP _qbld_rgig(SEXP nSEXP, SEXP lambdaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rgig(n, lambda, a, b));
    return rcpp_result_gen;
END_RCPP
}
// qbldunblock
Rcpp::List qbldunblock(int nsim, double p, arma::mat y, arma::mat datax, arma::mat datas, arma::vec b0, arma::mat B0, double c1, double d1, int m, int n, int k, int l, bool verbose);
RcppExport SEXP _qbld_qbldunblock(SEXP nsimSEXP, SEXP pSEXP, SEXP ySEXP, SEXP dataxSEXP, SEXP datasSEXP, SEXP b0SEXP, SEXP B0SEXP, SEXP c1SEXP, SEXP d1SEXP, SEXP mSEXP, SEXP nSEXP, SEXP kSEXP, SEXP lSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type datax(dataxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type datas(datasSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(qbldunblock(nsim, p, y, datax, datas, b0, B0, c1, d1, m, n, k, l, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qbld_qbldf", (DL_FUNC) &_qbld_qbldf, 14},
    {"_qbld_dgig", (DL_FUNC) &_qbld_dgig, 5},
    {"_qbld_raldmix", (DL_FUNC) &_qbld_raldmix, 4},
    {"_qbld_rgig", (DL_FUNC) &_qbld_rgig, 4},
    {"_qbld_qbldunblock", (DL_FUNC) &_qbld_qbldunblock, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_qbld(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
